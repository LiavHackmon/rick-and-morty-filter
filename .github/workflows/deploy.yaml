name: Deploy and Test Rick and Morty App
on:
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t liavhackmon/rick-morty-app:latest ./task2
          docker push liavhackmon/rick-morty-app:latest

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          version: v0.23.0
          clusterName: rickmorty-cluster

      - name: Deploy to Kind cluster
        run: |
          kubectl apply -f task2/yamls/Deployment.yaml
          kubectl apply -f task2/yamls/Service.yaml
          kubectl apply -f task2/yamls/Ingress.yaml
          kubectl wait --for=condition=ready pod -l app=rickmorty --timeout=120s

      - name: Test application endpoints
        run: |
          kubectl port-forward svc/rickmorty-service 8081:80 &
          sleep 5
          curl -f http://localhost:8081/rickmorty || exit 1
          curl -f http://localhost:8081/rickmorty/characters || exit 1
          curl -f http://localhost:8081/rickmorty/healthcheck || exit 1

      - name: Update README
        run: |
          cat << 'EOF' > README.md
          # Rick and Morty API Service

          This repository contains a Flask application that interacts with the Rick and Morty API to display human characters who are alive and originate from Earth. The application is deployed to a Kubernetes cluster using GitHub Actions.

          ## GitHub Actions Workflow

          The workflow is defined in `.github/workflows/deploy.yml` and runs on pushes to the `main` branch. It performs the following jobs and steps:

          ### Job: build-and-deploy
          - **Checkout repository**: Clones the repository using `actions/checkout@v4`.
          - **Set up Docker Buildx**: Configures Docker Buildx for building images using `docker/setup-buildx-action@v3`.
          - **Login to Docker Hub**: Authenticates with Docker Hub using stored secrets.
          - **Build and push Docker image**: Builds the Docker image from `Dockerfile` and pushes it to `liavhackmon/rick-morty-app:latest`.
          - **Set up Kind cluster**: Creates a local Kubernetes cluster using `helm/kind-action@v1.10.0`.
          - **Deploy to Kind cluster**: Applies Kubernetes manifests (`Deployment.yaml`, `Service.yaml`, `Ingress.yaml`) and waits for the pod to be ready.
          - **Test application endpoints**: Runs `curl` tests against the `/rickmorty`, `/rickmorty/characters`, and `/rickmorty/healthcheck` endpoints to verify functionality.

          ## Running the Workflow
          The workflow is triggered automatically on push to the `main` branch. Check the "Actions" tab in the GitHub repository to view the workflow run and its output.

          ## Prerequisites
          - Docker Hub account with credentials stored as GitHub secrets (`DOCKER_USERNAME`, `DOCKERHUB_TOKEN`).
          - Kubernetes manifests in the `kubernetes/` directory.
          - Application code in `app.py` and `Dockerfile`.

          ## Accessing the Application
          After deployment, the application is available at:
          - `http://localhost:8080/rickmorty` (home page)
          - `http://localhost:8080/rickmorty/characters` (characters page)
          - `http://localhost:8080/rickmorty/healthcheck` (healthcheck page)
          EOF

      
